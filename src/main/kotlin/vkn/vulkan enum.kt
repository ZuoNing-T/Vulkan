package vkn


var DEBUG = true//java.lang.management.ManagementFactory.getRuntimeMXBean().inputArguments.toString().indexOf("jdwp") >= 0


typealias VkFlags = Int

enum class VkPipelineCacheHeaderversion(val i: Int) {
    ONE(1);
}

var VULKAN_NO_EXCEPTIONS = false

class OutOfHostMemoryError(message: String) : Error(message)
class OutOfDeviceMemoryError(message: String) : Error(message)
class InitializationFailedError(message: String) : Error(message)
class DeviceLostError(message: String) : Error(message)
class MemoryMapFailedError(message: String) : Error(message)
class LayerNotPresentError(message: String) : Error(message)
class ExtensionNotPresentError(message: String) : Error(message)
class FeatureNotPresentError(message: String) : Error(message)
class IncompatibleDriverError(message: String) : Error(message)
class TooManyObjectsError(message: String) : Error(message)
class FormatNotSupportedError(message: String) : Error(message)
class FragmentedPoolError(message: String) : Error(message)
class SurfaceLostKhrError(message: String) : Error(message)
class NativeWindowInUseKhrError(message: String) : Error(message)
class OutOfDateKhrError(message: String) : Error(message)
class IncompatibleDisplayKhrError(message: String) : Error(message)
class ValidationFailedExtError(message: String) : Error(message)
class InvalidShaderNvError(message: String) : Error(message)
class OutOfPoolMemoryError(message: String) : Error(message)
class InvalidExternalHandleError(message: String) : Error(message)
class NotPermittedError(message: String) : Error(message)

enum class VkResult(val i: Int) {
    SUCCESS(0),
    NOT_READY(1),
    TIMEOUT(2),
    EVENT_SET(3),
    EVENT_RESET(4),
    INCOMPLETE(5),
    ERROR_OUT_OF_HOST_MEMORY(-1),
    ERROR_OUT_OF_DEVICE_MEMORY(-2),
    ERROR_INITIALIZATION_FAILED(-3),
    ERROR_DEVICE_LOST(-4),
    ERROR_MEMORY_MAP_FAILED(-5),
    ERROR_LAYER_NOT_PRESENT(-6),
    ERROR_EXTENSION_NOT_PRESENT(-7),
    ERROR_FEATURE_NOT_PRESENT(-8),
    ERROR_INCOMPATIBLE_DRIVER(-9),
    ERROR_TOO_MANY_OBJECTS(-10),
    ERROR_FORMAT_NOT_SUPPORTED(-11),
    ERROR_FRAGMENTED_POOL(-12),
    ERROR_OUT_OF_POOL_MEMORY(-1000069000),
    ERROR_INVALID_EXTERNAL_HANDLE(-1000072003),
    ERROR_SURFACE_LOST_KHR(-1000000000),
    ERROR_NATIVE_WINDOW_IN_USE_KHR(-1000000001),
    SUBOPTIMAL_KHR(1000001003),
    ERROR_OUT_OF_DATE_KHR(-1000001004),
    ERROR_INCOMPATIBLE_DISPLAY_KHR(-1000003001),
    ERROR_VALIDATION_FAILED_EXT(-1000011001),
    ERROR_INVALID_SHADER_NV(-1000012000),
    ERROR_FRAGMENTATION_EXT(-1000161000),
    ERROR_NOT_PERMITTED_EXT(-1000174001);

    inline operator fun invoke() = this != SUCCESS

    companion object {
        inline infix fun of(i: Int) = values().first { it.i == i }
    }
}

inline fun VK_CHECK_RESULT(i: Int) = VkResult.of(i).check()

fun VkResult.check(message: String = "Fatal : VkResult is $this") {
    if (DEBUG && this())
        if (VULKAN_NO_EXCEPTIONS)
            System.err.println(message)
        else
            when (this) {
                VkResult.ERROR_OUT_OF_HOST_MEMORY -> throw OutOfHostMemoryError(message)
                VkResult.ERROR_OUT_OF_DEVICE_MEMORY -> throw OutOfDeviceMemoryError(message)
                VkResult.ERROR_INITIALIZATION_FAILED -> throw InitializationFailedError(message)
                VkResult.ERROR_DEVICE_LOST -> throw DeviceLostError(message)
                VkResult.ERROR_MEMORY_MAP_FAILED -> throw MemoryMapFailedError(message)
                VkResult.ERROR_LAYER_NOT_PRESENT -> throw LayerNotPresentError(message)
                VkResult.ERROR_EXTENSION_NOT_PRESENT -> throw ExtensionNotPresentError(message)
                VkResult.ERROR_FEATURE_NOT_PRESENT -> throw FeatureNotPresentError(message)
                VkResult.ERROR_INCOMPATIBLE_DRIVER -> throw IncompatibleDriverError(message)
                VkResult.ERROR_TOO_MANY_OBJECTS -> throw TooManyObjectsError(message)
                VkResult.ERROR_FORMAT_NOT_SUPPORTED -> throw FormatNotSupportedError(message)
                VkResult.ERROR_FRAGMENTED_POOL -> throw FragmentedPoolError(message)
                VkResult.ERROR_SURFACE_LOST_KHR -> throw SurfaceLostKhrError(message)
                VkResult.ERROR_NATIVE_WINDOW_IN_USE_KHR -> throw NativeWindowInUseKhrError(message)
                VkResult.ERROR_OUT_OF_DATE_KHR -> throw OutOfDateKhrError(message)
                VkResult.ERROR_INCOMPATIBLE_DISPLAY_KHR -> throw IncompatibleDisplayKhrError(message)
                VkResult.ERROR_VALIDATION_FAILED_EXT -> throw ValidationFailedExtError(message)
                VkResult.ERROR_INVALID_SHADER_NV -> throw InvalidShaderNvError(message)
                VkResult.ERROR_OUT_OF_POOL_MEMORY -> throw OutOfPoolMemoryError(message)
                VkResult.ERROR_INVALID_EXTERNAL_HANDLE -> throw InvalidExternalHandleError(message)
                VkResult.ERROR_NOT_PERMITTED_EXT -> throw NotPermittedError(message)
                else -> throw Error(message)
            }
}

enum class VkStructureType(val i: Int) {
    APPLICATION_INFO(0),
    INSTANCE_CREATE_INFO(1),
    DEVICE_QUEUE_CREATE_INFO(2),
    DEVICE_CREATE_INFO(3),
    SUBMIT_INFO(4),
    MEMORY_ALLOCATE_INFO(5),
    MAPPED_MEMORY_RANGE(6),
    BIND_SPARSE_INFO(7),
    FENCE_CREATE_INFO(8),
    SEMAPHORE_CREATE_INFO(9),
    EVENT_CREATE_INFO(10),
    QUERY_POOL_CREATE_INFO(11),
    BUFFER_CREATE_INFO(12),
    BUFFER_VIEW_CREATE_INFO(13),
    IMAGE_CREATE_INFO(14),
    IMAGE_VIEW_CREATE_INFO(15),
    SHADER_MODULE_CREATE_INFO(16),
    PIPELINE_CACHE_CREATE_INFO(17),
    PIPELINE_SHADER_STAGE_CREATE_INFO(18),
    PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO(19),
    PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO(20),
    PIPELINE_TESSELLATION_STATE_CREATE_INFO(21),
    PIPELINE_VIEWPORT_STATE_CREATE_INFO(22),
    PIPELINE_RASTERIZATION_STATE_CREATE_INFO(23),
    PIPELINE_MULTISAMPLE_STATE_CREATE_INFO(24),
    PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO(25),
    PIPELINE_COLOR_BLEND_STATE_CREATE_INFO(26),
    PIPELINE_DYNAMIC_STATE_CREATE_INFO(27),
    GRAPHICS_PIPELINE_CREATE_INFO(28),
    COMPUTE_PIPELINE_CREATE_INFO(29),
    PIPELINE_LAYOUT_CREATE_INFO(30),
    SAMPLER_CREATE_INFO(31),
    DESCRIPTOR_SET_LAYOUT_CREATE_INFO(32),
    DESCRIPTOR_POOL_CREATE_INFO(33),
    DESCRIPTOR_SET_ALLOCATE_INFO(34),
    WRITE_DESCRIPTOR_SET(35),
    COPY_DESCRIPTOR_SET(36),
    FRAMEBUFFER_CREATE_INFO(37),
    RENDER_PASS_CREATE_INFO(38),
    COMMAND_POOL_CREATE_INFO(39),
    COMMAND_BUFFER_ALLOCATE_INFO(40),
    COMMAND_BUFFER_INHERITANCE_INFO(41),
    COMMAND_BUFFER_BEGIN_INFO(42),
    RENDER_PASS_BEGIN_INFO(43),
    BUFFER_MEMORY_BARRIER(44),
    IMAGE_MEMORY_BARRIER(45),
    MEMORY_BARRIER(46),
    LOADER_INSTANCE_CREATE_INFO(47),
    LOADER_DEVICE_CREATE_INFO(48),
    PHYSICAL_DEVICE_SUBGROUP_PROPERTIES(1000094000),
    BIND_BUFFER_MEMORY_INFO(1000157000),
    BIND_IMAGE_MEMORY_INFO(1000157001),
    PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES(1000083000),
    MEMORY_DEDICATED_REQUIREMENTS(1000127000),
    MEMORY_DEDICATED_ALLOCATE_INFO(1000127001),
    MEMORY_ALLOCATE_FLAGS_INFO(1000060000),
    DEVICE_GROUP_RENDER_PASS_BEGIN_INFO(1000060003),
    DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO(1000060004),
    DEVICE_GROUP_SUBMIT_INFO(1000060005),
    DEVICE_GROUP_BIND_SPARSE_INFO(1000060006),
    BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO(1000060013),
    BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO(1000060014),
    PHYSICAL_DEVICE_GROUP_PROPERTIES(1000070000),
    DEVICE_GROUP_DEVICE_CREATE_INFO(1000070001),
    BUFFER_MEMORY_REQUIREMENTS_INFO_2(1000146000),
    IMAGE_MEMORY_REQUIREMENTS_INFO_2(1000146001),
    IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2(1000146002),
    MEMORY_REQUIREMENTS_2(1000146003),
    SPARSE_IMAGE_MEMORY_REQUIREMENTS_2(1000146004),
    PHYSICAL_DEVICE_FEATURES_2(1000059000),
    PHYSICAL_DEVICE_PROPERTIES_2(1000059001),
    FORMAT_PROPERTIES_2(1000059002),
    IMAGE_FORMAT_PROPERTIES_2(1000059003),
    PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2(1000059004),
    QUEUE_FAMILY_PROPERTIES_2(1000059005),
    PHYSICAL_DEVICE_MEMORY_PROPERTIES_2(1000059006),
    SPARSE_IMAGE_FORMAT_PROPERTIES_2(1000059007),
    PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2(1000059008),
    PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES(1000117000),
    RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO(1000117001),
    IMAGE_VIEW_USAGE_CREATE_INFO(1000117002),
    PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO(1000117003),
    RENDER_PASS_MULTIVIEW_CREATE_INFO(1000053000),
    PHYSICAL_DEVICE_MULTIVIEW_FEATURES(1000053001),
    PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES(1000053002),
    PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES(1000120000),
    PROTECTED_SUBMIT_INFO(1000145000),
    PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES(1000145001),
    PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES(1000145002),
    DEVICE_QUEUE_INFO_2(1000145003),
    SAMPLER_YCBCR_CONVERSION_CREATE_INFO(1000156000),
    SAMPLER_YCBCR_CONVERSION_INFO(1000156001),
    BIND_IMAGE_PLANE_MEMORY_INFO(1000156002),
    IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO(1000156003),
    PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES(1000156004),
    SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES(1000156005),
    DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO(1000085000),
    PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO(1000071000),
    EXTERNAL_IMAGE_FORMAT_PROPERTIES(1000071001),
    PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO(1000071002),
    EXTERNAL_BUFFER_PROPERTIES(1000071003),
    PHYSICAL_DEVICE_ID_PROPERTIES(1000071004),
    EXTERNAL_MEMORY_BUFFER_CREATE_INFO(1000072000),
    EXTERNAL_MEMORY_IMAGE_CREATE_INFO(1000072001),
    EXPORT_MEMORY_ALLOCATE_INFO(1000072002),
    PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO(1000112000),
    EXTERNAL_FENCE_PROPERTIES(1000112001),
    EXPORT_FENCE_CREATE_INFO(1000113000),
    EXPORT_SEMAPHORE_CREATE_INFO(1000077000),
    PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO(1000076000),
    EXTERNAL_SEMAPHORE_PROPERTIES(1000076001),
    PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES(1000168000),
    DESCRIPTOR_SET_LAYOUT_SUPPORT(1000168001),
    PHYSICAL_DEVICE_SHADER_DRAW_PARAMETER_FEATURES(1000063000),
    SWAPCHAIN_CREATE_INFO_KHR(1000001000),
    PRESENT_INFO_KHR(1000001001),
    DEVICE_GROUP_PRESENT_CAPABILITIES_KHR(1000060007),
    IMAGE_SWAPCHAIN_CREATE_INFO_KHR(1000060008),
    BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR(1000060009),
    ACQUIRE_NEXT_IMAGE_INFO_KHR(1000060010),
    DEVICE_GROUP_PRESENT_INFO_KHR(1000060011),
    DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR(1000060012),
    DISPLAY_MODE_CREATE_INFO_KHR(1000002000),
    DISPLAY_SURFACE_CREATE_INFO_KHR(1000002001),
    DISPLAY_PRESENT_INFO_KHR(1000003000),
    XLIB_SURFACE_CREATE_INFO_KHR(1000004000),
    XCB_SURFACE_CREATE_INFO_KHR(1000005000),
    WAYLAND_SURFACE_CREATE_INFO_KHR(1000006000),
    MIR_SURFACE_CREATE_INFO_KHR(1000007000),
    ANDROID_SURFACE_CREATE_INFO_KHR(1000008000),
    WIN32_SURFACE_CREATE_INFO_KHR(1000009000),
    DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT(1000011000),
    PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD(1000018000),
    DEBUG_MARKER_OBJECT_NAME_INFO_EXT(1000022000),
    DEBUG_MARKER_OBJECT_TAG_INFO_EXT(1000022001),
    DEBUG_MARKER_MARKER_INFO_EXT(1000022002),
    DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV(1000026000),
    DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV(1000026001),
    DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV(1000026002),
    TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD(1000041000),
    EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV(1000056000),
    EXPORT_MEMORY_ALLOCATE_INFO_NV(1000056001),
    IMPORT_MEMORY_WIN32_HANDLE_INFO_NV(1000057000),
    EXPORT_MEMORY_WIN32_HANDLE_INFO_NV(1000057001),
    WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV(1000058000),
    VALIDATION_FLAGS_EXT(1000061000),
    VI_SURFACE_CREATE_INFO_NN(1000062000),
    IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR(1000073000),
    EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR(1000073001),
    MEMORY_WIN32_HANDLE_PROPERTIES_KHR(1000073002),
    MEMORY_GET_WIN32_HANDLE_INFO_KHR(1000073003),
    IMPORT_MEMORY_FD_INFO_KHR(1000074000),
    MEMORY_FD_PROPERTIES_KHR(1000074001),
    MEMORY_GET_FD_INFO_KHR(1000074002),
    WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR(1000075000),
    IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR(1000078000),
    EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR(1000078001),
    D3D12_FENCE_SUBMIT_INFO_KHR(1000078002),
    SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR(1000078003),
    IMPORT_SEMAPHORE_FD_INFO_KHR(1000079000),
    SEMAPHORE_GET_FD_INFO_KHR(1000079001),
    PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR(1000080000),
    PRESENT_REGIONS_KHR(1000084000),
    OBJECT_TABLE_CREATE_INFO_NVX(1000086000),
    INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NVX(1000086001),
    CMD_PROCESS_COMMANDS_INFO_NVX(1000086002),
    CMD_RESERVE_SPACE_FOR_COMMANDS_INFO_NVX(1000086003),
    DEVICE_GENERATED_COMMANDS_LIMITS_NVX(1000086004),
    DEVICE_GENERATED_COMMANDS_FEATURES_NVX(1000086005),
    PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV(1000087000),
    SURFACE_CAPABILITIES_2_EXT(1000090000),
    DISPLAY_POWER_INFO_EXT(1000091000),
    DEVICE_EVENT_INFO_EXT(1000091001),
    DISPLAY_EVENT_INFO_EXT(1000091002),
    SWAPCHAIN_COUNTER_CREATE_INFO_EXT(1000091003),
    PRESENT_TIMES_INFO_GOOGLE(1000092000),
    PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX(1000097000),
    PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV(1000098000),
    PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT(1000099000),
    PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT(1000099001),
    PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT(1000101000),
    PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT(1000101001),
    HDR_METADATA_EXT(1000105000),
    SHARED_PRESENT_SURFACE_CAPABILITIES_KHR(1000111000),
    IMPORT_FENCE_WIN32_HANDLE_INFO_KHR(1000114000),
    EXPORT_FENCE_WIN32_HANDLE_INFO_KHR(1000114001),
    FENCE_GET_WIN32_HANDLE_INFO_KHR(1000114002),
    IMPORT_FENCE_FD_INFO_KHR(1000115000),
    FENCE_GET_FD_INFO_KHR(1000115001),
    PHYSICAL_DEVICE_SURFACE_INFO_2_KHR(1000119000),
    SURFACE_CAPABILITIES_2_KHR(1000119001),
    SURFACE_FORMAT_2_KHR(1000119002),
    IOS_SURFACE_CREATE_INFO_MVK(1000122000),
    MACOS_SURFACE_CREATE_INFO_MVK(1000123000),
    DEBUG_UTILS_OBJECT_NAME_INFO_EXT(1000128000),
    DEBUG_UTILS_OBJECT_TAG_INFO_EXT(1000128001),
    DEBUG_UTILS_LABEL_EXT(1000128002),
    DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT(1000128003),
    DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT(1000128004),
    ANDROID_HARDWARE_BUFFER_USAGE_ANDROID(1000129000),
    ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID(1000129001),
    ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID(1000129002),
    IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID(1000129003),
    MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID(1000129004),
    EXTERNAL_FORMAT_ANDROID(1000129005),
    PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT(1000130000),
    SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT(1000130001),
    SAMPLE_LOCATIONS_INFO_EXT(1000143000),
    RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT(1000143001),
    PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT(1000143002),
    PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT(1000143003),
    MULTISAMPLE_PROPERTIES_EXT(1000143004),
    IMAGE_FORMAT_LIST_CREATE_INFO_KHR(1000147000),
    PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT(1000148000),
    PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT(1000148001),
    PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT(1000148002),
    PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV(1000149000),
    PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV(1000152000),
    VALIDATION_CACHE_CREATE_INFO_EXT(1000160000),
    SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT(1000160001),
    DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT(1000161000),
    PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT(1000161001),
    PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT(1000161002),
    DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT(1000161003),
    DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT(1000161004),
    DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT(1000174000),
    IMPORT_MEMORY_HOST_POINTER_INFO_EXT(1000178000),
    MEMORY_HOST_POINTER_PROPERTIES_EXT(1000178001),
    PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT(1000178002),
    PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD(1000185000),
    PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT(1000190000),
    PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT(1000190001);

    companion object {
        inline infix fun of(i: Int) = values().first { it.i == i }
    }
}


enum class VkSystemAllocationScope(val i: Int) {
    COMMAND(0),
    OBJECT(1),
    CACHE(2),
    DEVICE(3),
    INSTANCE(4);

    companion object {
        inline infix fun of(i: Int) = values().first { it.i == i }
    }
}

enum class VkInternalAllocationType(val i: Int) {
    EXECUTABLE(0);

    companion object {
        inline infix fun of(i: Int) = values().first { it.i == i }
    }
}


enum class VkFormat(val i: Int) {
    UNDEFINED(0),
    R4G4_UNORM_PACK8(1),
    R4G4B4A4_UNORM_PACK16(2),
    B4G4R4A4_UNORM_PACK16(3),
    R5G6B5_UNORM_PACK16(4),
    B5G6R5_UNORM_PACK16(5),
    R5G5B5A1_UNORM_PACK16(6),
    B5G5R5A1_UNORM_PACK16(7),
    A1R5G5B5_UNORM_PACK16(8),
    R8_UNORM(9),
    R8_SNORM(10),
    R8_USCALED(11),
    R8_SSCALED(12),
    R8_UINT(13),
    R8_SINT(14),
    R8_SRGB(15),
    R8G8_UNORM(16),
    R8G8_SNORM(17),
    R8G8_USCALED(18),
    R8G8_SSCALED(19),
    R8G8_UINT(20),
    R8G8_SINT(21),
    R8G8_SRGB(22),
    R8G8B8_UNORM(23),
    R8G8B8_SNORM(24),
    R8G8B8_USCALED(25),
    R8G8B8_SSCALED(26),
    R8G8B8_UINT(27),
    R8G8B8_SINT(28),
    R8G8B8_SRGB(29),
    B8G8R8_UNORM(30),
    B8G8R8_SNORM(31),
    B8G8R8_USCALED(32),
    B8G8R8_SSCALED(33),
    B8G8R8_UINT(34),
    B8G8R8_SINT(35),
    B8G8R8_SRGB(36),
    R8G8B8A8_UNORM(37),
    R8G8B8A8_SNORM(38),
    R8G8B8A8_USCALED(39),
    R8G8B8A8_SSCALED(40),
    R8G8B8A8_UINT(41),
    R8G8B8A8_SINT(42),
    R8G8B8A8_SRGB(43),
    B8G8R8A8_UNORM(44),
    B8G8R8A8_SNORM(45),
    B8G8R8A8_USCALED(46),
    B8G8R8A8_SSCALED(47),
    B8G8R8A8_UINT(48),
    B8G8R8A8_SINT(49),
    B8G8R8A8_SRGB(50),
    A8B8G8R8_UNORM_PACK32(51),
    A8B8G8R8_SNORM_PACK32(52),
    A8B8G8R8_USCALED_PACK32(53),
    A8B8G8R8_SSCALED_PACK32(54),
    A8B8G8R8_UINT_PACK32(55),
    A8B8G8R8_SINT_PACK32(56),
    A8B8G8R8_SRGB_PACK32(57),
    A2R10G10B10_UNORM_PACK32(58),
    A2R10G10B10_SNORM_PACK32(59),
    A2R10G10B10_USCALED_PACK32(60),
    A2R10G10B10_SSCALED_PACK32(61),
    A2R10G10B10_UINT_PACK32(62),
    A2R10G10B10_SINT_PACK32(63),
    A2B10G10R10_UNORM_PACK32(64),
    A2B10G10R10_SNORM_PACK32(65),
    A2B10G10R10_USCALED_PACK32(66),
    A2B10G10R10_SSCALED_PACK32(67),
    A2B10G10R10_UINT_PACK32(68),
    A2B10G10R10_SINT_PACK32(69),
    R16_UNORM(70),
    R16_SNORM(71),
    R16_USCALED(72),
    R16_SSCALED(73),
    R16_UINT(74),
    R16_SINT(75),
    R16_SFLOAT(76),
    R16G16_UNORM(77),
    R16G16_SNORM(78),
    R16G16_USCALED(79),
    R16G16_SSCALED(80),
    R16G16_UINT(81),
    R16G16_SINT(82),
    R16G16_SFLOAT(83),
    R16G16B16_UNORM(84),
    R16G16B16_SNORM(85),
    R16G16B16_USCALED(86),
    R16G16B16_SSCALED(87),
    R16G16B16_UINT(88),
    R16G16B16_SINT(89),
    R16G16B16_SFLOAT(90),
    R16G16B16A16_UNORM(91),
    R16G16B16A16_SNORM(92),
    R16G16B16A16_USCALED(93),
    R16G16B16A16_SSCALED(94),
    R16G16B16A16_UINT(95),
    R16G16B16A16_SINT(96),
    R16G16B16A16_SFLOAT(97),
    R32_UINT(98),
    R32_SINT(99),
    R32_SFLOAT(100),
    R32G32_UINT(101),
    R32G32_SINT(102),
    R32G32_SFLOAT(103),
    R32G32B32_UINT(104),
    R32G32B32_SINT(105),
    R32G32B32_SFLOAT(106),
    R32G32B32A32_UINT(107),
    R32G32B32A32_SINT(108),
    R32G32B32A32_SFLOAT(109),
    R64_UINT(110),
    R64_SINT(111),
    R64_SFLOAT(112),
    R64G64_UINT(113),
    R64G64_SINT(114),
    R64G64_SFLOAT(115),
    R64G64B64_UINT(116),
    R64G64B64_SINT(117),
    R64G64B64_SFLOAT(118),
    R64G64B64A64_UINT(119),
    R64G64B64A64_SINT(120),
    R64G64B64A64_SFLOAT(121),
    B10G11R11_UFLOAT_PACK32(122),
    E5B9G9R9_UFLOAT_PACK32(123),
    D16_UNORM(124),
    X8_D24_UNORM_PACK32(125),
    D32_SFLOAT(126),
    S8_UINT(127),
    D16_UNORM_S8_UINT(128),
    D24_UNORM_S8_UINT(129),
    D32_SFLOAT_S8_UINT(130),
    BC1_RGB_UNORM_BLOCK(131),
    BC1_RGB_SRGB_BLOCK(132),
    BC1_RGBA_UNORM_BLOCK(133),
    BC1_RGBA_SRGB_BLOCK(134),
    BC2_UNORM_BLOCK(135),
    BC2_SRGB_BLOCK(136),
    BC3_UNORM_BLOCK(137),
    BC3_SRGB_BLOCK(138),
    BC4_UNORM_BLOCK(139),
    BC4_SNORM_BLOCK(140),
    BC5_UNORM_BLOCK(141),
    BC5_SNORM_BLOCK(142),
    BC6H_UFLOAT_BLOCK(143),
    BC6H_SFLOAT_BLOCK(144),
    BC7_UNORM_BLOCK(145),
    BC7_SRGB_BLOCK(146),
    ETC2_R8G8B8_UNORM_BLOCK(147),
    ETC2_R8G8B8_SRGB_BLOCK(148),
    ETC2_R8G8B8A1_UNORM_BLOCK(149),
    ETC2_R8G8B8A1_SRGB_BLOCK(150),
    ETC2_R8G8B8A8_UNORM_BLOCK(151),
    ETC2_R8G8B8A8_SRGB_BLOCK(152),
    EAC_R11_UNORM_BLOCK(153),
    EAC_R11_SNORM_BLOCK(154),
    EAC_R11G11_UNORM_BLOCK(155),
    EAC_R11G11_SNORM_BLOCK(156),
    ASTC_4x4_UNORM_BLOCK(157),
    ASTC_4x4_SRGB_BLOCK(158),
    ASTC_5x4_UNORM_BLOCK(159),
    ASTC_5x4_SRGB_BLOCK(160),
    ASTC_5x5_UNORM_BLOCK(161),
    ASTC_5x5_SRGB_BLOCK(162),
    ASTC_6x5_UNORM_BLOCK(163),
    ASTC_6x5_SRGB_BLOCK(164),
    ASTC_6x6_UNORM_BLOCK(165),
    ASTC_6x6_SRGB_BLOCK(166),
    ASTC_8x5_UNORM_BLOCK(167),
    ASTC_8x5_SRGB_BLOCK(168),
    ASTC_8x6_UNORM_BLOCK(169),
    ASTC_8x6_SRGB_BLOCK(170),
    ASTC_8x8_UNORM_BLOCK(171),
    ASTC_8x8_SRGB_BLOCK(172),
    ASTC_10x5_UNORM_BLOCK(173),
    ASTC_10x5_SRGB_BLOCK(174),
    ASTC_10x6_UNORM_BLOCK(175),
    ASTC_10x6_SRGB_BLOCK(176),
    ASTC_10x8_UNORM_BLOCK(177),
    ASTC_10x8_SRGB_BLOCK(178),
    ASTC_10x10_UNORM_BLOCK(179),
    ASTC_10x10_SRGB_BLOCK(180),
    ASTC_12x10_UNORM_BLOCK(181),
    ASTC_12x10_SRGB_BLOCK(182),
    ASTC_12x12_UNORM_BLOCK(183),
    ASTC_12x12_SRGB_BLOCK(184),
    G8B8G8R8_422_UNORM(1000156000),
    B8G8R8G8_422_UNORM(1000156001),
    G8_B8_R8_3PLANE_420_UNORM(1000156002),
    G8_B8R8_2PLANE_420_UNORM(1000156003),
    G8_B8_R8_3PLANE_422_UNORM(1000156004),
    G8_B8R8_2PLANE_422_UNORM(1000156005),
    G8_B8_R8_3PLANE_444_UNORM(1000156006),
    R10X6_UNORM_PACK16(1000156007),
    R10X6G10X6_UNORM_2PACK16(1000156008),
    R10X6G10X6B10X6A10X6_UNORM_4PACK16(1000156009),
    G10X6B10X6G10X6R10X6_422_UNORM_4PACK16(1000156010),
    B10X6G10X6R10X6G10X6_422_UNORM_4PACK16(1000156011),
    G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16(1000156012),
    G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16(1000156013),
    G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16(1000156014),
    G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16(1000156015),
    G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16(1000156016),
    R12X4_UNORM_PACK16(1000156017),
    R12X4G12X4_UNORM_2PACK16(1000156018),
    R12X4G12X4B12X4A12X4_UNORM_4PACK16(1000156019),
    G12X4B12X4G12X4R12X4_422_UNORM_4PACK16(1000156020),
    B12X4G12X4R12X4G12X4_422_UNORM_4PACK16(1000156021),
    G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16(1000156022),
    G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16(1000156023),
    G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16(1000156024),
    G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16(1000156025),
    G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16(1000156026),
    G16B16G16R16_422_UNORM(1000156027),
    B16G16R16G16_422_UNORM(1000156028),
    G16_B16_R16_3PLANE_420_UNORM(1000156029),
    G16_B16R16_2PLANE_420_UNORM(1000156030),
    G16_B16_R16_3PLANE_422_UNORM(1000156031),
    G16_B16R16_2PLANE_422_UNORM(1000156032),
    G16_B16_R16_3PLANE_444_UNORM(1000156033),
    PVRTC1_2BPP_UNORM_BLOCK_IMG(1000054000),
    PVRTC1_4BPP_UNORM_BLOCK_IMG(1000054001),
    PVRTC2_2BPP_UNORM_BLOCK_IMG(1000054002),
    PVRTC2_4BPP_UNORM_BLOCK_IMG(1000054003),
    PVRTC1_2BPP_SRGB_BLOCK_IMG(1000054004),
    PVRTC1_4BPP_SRGB_BLOCK_IMG(1000054005),
    PVRTC2_2BPP_SRGB_BLOCK_IMG(1000054006),
    PVRTC2_4BPP_SRGB_BLOCK_IMG(1000054007);

    infix operator fun plus(i: Int) = of(this.i + i)

    companion object {
        inline infix fun of(i: Int) = values().first { it.i == i }
    }
}


enum class VkImageType(val i: Int) {
    `1D`(0),
    `2D`(1),
    `3D`(2);

    companion object {
        inline infix fun of(i: Int) = values().first { it.i == i }
    }
}

enum class VkImageTiling(val i: Int) {
    OPTIMAL(0),
    LINEAR(1);

    companion object {
        inline infix fun of(i: Int) = values().first { it.i == i }
    }
}

enum class VkPhysicalDeviceType(val i: Int) {
    OTHER(0),
    INTEGRATED_GPU(1),
    DISCRETE_GPU(2),
    VIRTUAL_GPU(3),
    CPU(4);

    companion object {
        inline infix fun of(i: Int) = values().first { it.i == i }
    }
}

enum class VkQueryType(val i: Int) {
    OCCLUSION(0),
    PIPELINE_STATISTICS(1),
    TIMESTAMP(2);

    companion object {
        inline infix fun of(i: Int) = values().first { it.i == i }
    }
}

enum class VkSharingMode(val i: Int) {
    EXCLUSIVE(0),
    CONCURRENT(1);

    companion object {
        inline infix fun of(i: Int) = values().first { it.i == i }
    }
}

enum class VkImageLayout(val i: Int) {
    UNDEFINED(0),
    GENERAL(1),
    COLOR_ATTACHMENT_OPTIMAL(2),
    DEPTH_STENCIL_ATTACHMENT_OPTIMAL(3),
    DEPTH_STENCIL_READ_ONLY_OPTIMAL(4),
    SHADER_READ_ONLY_OPTIMAL(5),
    TRANSFER_SRC_OPTIMAL(6),
    TRANSFER_DST_OPTIMAL(7),
    PREINITIALIZED(8),
    DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL(1000117000),
    DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL(1000117001),
    PRESENT_SRC_KHR(1000001002),
    SHARED_PRESENT_KHR(1000111000);

    val accessMask: VkAccessFlags
        get() = when (this) {
            PREINITIALIZED -> VkAccess.HOST_WRITE_BIT.i
            COLOR_ATTACHMENT_OPTIMAL -> VkAccess.COLOR_ATTACHMENT_WRITE_BIT.i
            DEPTH_STENCIL_ATTACHMENT_OPTIMAL -> VkAccess.DEPTH_STENCIL_ATTACHMENT_WRITE_BIT.i
            TRANSFER_SRC_OPTIMAL -> VkAccess.TRANSFER_READ_BIT.i
            TRANSFER_DST_OPTIMAL -> VkAccess.TRANSFER_WRITE_BIT.i
            SHADER_READ_ONLY_OPTIMAL -> VkAccess.SHADER_READ_BIT.i
            else -> 0
        }

    companion object {
        inline infix fun of(i: Int) = values().first { it.i == i }
    }
}


enum class VkImageViewType(val i: Int) {
    `1D`(0),
    `2D`(1),
    `3D`(2),
    CUBE(3),
    `1D_ARRAY`(4),
    `2D_ARRAY`(5),
    CUBE_ARRAY(6);

    companion object {
        inline infix fun of(i: Int) = values().first { it.i == i }
    }
}


enum class VkComponentSwizzle(val i: Int) {
    IDENTITY(0),
    ZERO(1),
    ONE(2),
    R(3),
    G(4),
    B(5),
    A(6);

    companion object {
        inline infix fun of(i: Int) = values().first { it.i == i }
    }
}


enum class VkVertexInputRate(val i: Int) {
    VERTEX(0),
    INSTANCE(1);

    companion object {
        inline infix fun of(i: Int) = values().first { it.i == i }
    }
}

enum class VkPrimitiveTopology(val i: Int) {
    POINT_LIST(0),
    LINE_LIST(1),
    LINE_STRIP(2),
    TRIANGLE_LIST(3),
    TRIANGLE_STRIP(4),
    TRIANGLE_FAN(5),
    LINE_LIST_WITH_ADJACENCY(6),
    LINE_STRIP_WITH_ADJACENCY(7),
    TRIANGLE_LIST_WITH_ADJACENCY(8),
    TRIANGLE_STRIP_WITH_ADJACENCY(9),
    PATCH_LIST(10);

    companion object {
        inline infix fun of(i: Int) = values().first { it.i == i }
    }
}


enum class VkPolygonMode(val i: Int) {
    FILL(0),
    LINE(1),
    POINT(2),
    FILL_RECTANGLE_NV(1000153000);

    companion object {
        inline infix fun of(i: Int) = values().first { it.i == i }
    }
}

enum class VkFrontFace(val i: Int) {
    COUNTER_CLOCKWISE(0),
    CLOCKWISE(1);

    companion object {
        inline infix fun of(i: Int) = values().first { it.i == i }
    }
}


enum class VkCompareOp(val i: Int) {
    NEVER(0),
    LESS(1),
    EQUAL(2),
    LESS_OR_EQUAL(3),
    GREATER(4),
    NOT_EQUAL(5),
    GREATER_OR_EQUAL(6),
    ALWAYS(7);

    companion object {
        inline infix fun of(i: Int) = values().first { it.i == i }
    }
}

enum class VkStencilOp(val i: Int) {
    KEEP(0),
    ZERO(1),
    REPLACE(2),
    INCREMENT_AND_CLAMP(3),
    DECREMENT_AND_CLAMP(4),
    INVERT(5),
    INCREMENT_AND_WRAP(6),
    DECREMENT_AND_WRAP(7);

    companion object {
        inline infix fun of(i: Int) = values().first { it.i == i }
    }
}


enum class VkLogicOp(val i: Int) {
    CLEAR(0),
    AND(1),
    AND_REVERSE(2),
    COPY(3),
    AND_INVERTED(4),
    NO_OP(5),
    XOR(6),
    OR(7),
    NOR(8),
    EQUIVALENT(9),
    INVERT(10),
    OR_REVERSE(11),
    COPY_INVERTED(12),
    OR_INVERTED(13),
    NAND(14),
    SET(15);

    companion object {
        inline infix fun of(i: Int) = values().first { it.i == i }
    }
}

enum class VkBlendFactor(val i: Int) {
    ZERO(0),
    ONE(1),
    SRC_COLOR(2),
    ONE_MINUS_SRC_COLOR(3),
    DST_COLOR(4),
    ONE_MINUS_DST_COLOR(5),
    SRC_ALPHA(6),
    ONE_MINUS_SRC_ALPHA(7),
    DST_ALPHA(8),
    ONE_MINUS_DST_ALPHA(9),
    CONSTANT_COLOR(10),
    ONE_MINUS_CONSTANT_COLOR(11),
    CONSTANT_ALPHA(12),
    ONE_MINUS_CONSTANT_ALPHA(13),
    SRC_ALPHA_SATURATE(14),
    SRC1_COLOR(15),
    ONE_MINUS_SRC1_COLOR(16),
    SRC1_ALPHA(17),
    ONE_MINUS_SRC1_ALPHA(18);

    companion object {
        inline infix fun of(i: Int) = values().first { it.i == i }
    }
}


enum class VkBlendOp(val i: Int) {
    ADD(0),
    SUBTRACT(1),
    REVERSE_SUBTRACT(2),
    MIN(3),
    MAX(4),
    ZERO_EXT(1000148000),
    SRC_EXT(1000148001),
    DST_EXT(1000148002),
    SRC_OVER_EXT(1000148003),
    DST_OVER_EXT(1000148004),
    SRC_IN_EXT(1000148005),
    DST_IN_EXT(1000148006),
    SRC_OUT_EXT(1000148007),
    DST_OUT_EXT(1000148008),
    SRC_ATOP_EXT(1000148009),
    DST_ATOP_EXT(1000148010),
    XOR_EXT(1000148011),
    MULTIPLY_EXT(1000148012),
    SCREEN_EXT(1000148013),
    OVERLAY_EXT(1000148014),
    DARKEN_EXT(1000148015),
    LIGHTEN_EXT(1000148016),
    COLORDODGE_EXT(1000148017),
    COLORBURN_EXT(1000148018),
    HARDLIGHT_EXT(1000148019),
    SOFTLIGHT_EXT(1000148020),
    DIFFERENCE_EXT(1000148021),
    EXCLUSION_EXT(1000148022),
    INVERT_EXT(1000148023),
    INVERT_RGB_EXT(1000148024),
    LINEARDODGE_EXT(1000148025),
    LINEARBURN_EXT(1000148026),
    VIVIDLIGHT_EXT(1000148027),
    LINEARLIGHT_EXT(1000148028),
    PINLIGHT_EXT(1000148029),
    HARDMIX_EXT(1000148030),
    HSL_HUE_EXT(1000148031),
    HSL_SATURATION_EXT(1000148032),
    HSL_COLOR_EXT(1000148033),
    HSL_LUMINOSITY_EXT(1000148034),
    PLUS_EXT(1000148035),
    PLUS_CLAMPED_EXT(1000148036),
    PLUS_CLAMPED_ALPHA_EXT(1000148037),
    PLUS_DARKER_EXT(1000148038),
    MINUS_EXT(1000148039),
    MINUS_CLAMPED_EXT(1000148040),
    CONTRAST_EXT(1000148041),
    INVERT_OVG_EXT(1000148042),
    RED_EXT(1000148043),
    GREEN_EXT(1000148044),
    BLUE_EXT(1000148045);

    companion object {
        inline infix fun of(i: Int) = values().first { it.i == i }
    }
}


enum class VkDynamicState(val i: Int) {
    VIEWPORT(0),
    SCISSOR(1),
    LINE_WIDTH(2),
    DEPTH_BIAS(3),
    BLEND_CONSTANTS(4),
    DEPTH_BOUNDS(5),
    STENCIL_COMPARE_MASK(6),
    STENCIL_WRITE_MASK(7),
    STENCIL_REFERENCE(8),
    VIEWPORT_W_SCALING_NV(1000087000),
    DISCARD_RECTANGLE_EXT(1000099000),
    SAMPLE_LOCATIONS_EXT(1000143000);

    companion object {
        inline infix fun of(i: Int) = values().first { it.i == i }
    }
}


enum class VkFilter(val i: Int) {
    NEAREST(0),
    LINEAR(1),
    CUBIC_IMG(1000015000);

    companion object {
        inline infix fun of(i: Int) = values().first { it.i == i }
    }
}

enum class VkSamplerMipmapMode(val i: Int) {
    NEAREST(0),
    LINEAR(1);

    companion object {
        inline infix fun of(i: Int) = values().first { it.i == i }
    }
}

enum class VkSamplerAddressMode(val i: Int) {
    REPEAT(0),
    MIRRORED_REPEAT(1),
    CLAMP_TO_EDGE(2),
    CLAMP_TO_BORDER(3),
    MIRROR_CLAMP_TO_EDGE(4);

    companion object {
        inline infix fun of(i: Int) = values().first { it.i == i }
    }
}

enum class VkBorderColor(val i: Int) {
    FLOAT_TRANSPARENT_BLACK(0),
    INT_TRANSPARENT_BLACK(1),
    FLOAT_OPAQUE_BLACK(2),
    INT_OPAQUE_BLACK(3),
    FLOAT_OPAQUE_WHITE(4),
    INT_OPAQUE_WHITE(5);

    companion object {
        inline infix fun of(i: Int) = values().first { it.i == i }
    }
}

enum class VkDescriptorType(val i: Int) {
    SAMPLER(0),
    COMBINED_IMAGE_SAMPLER(1),
    SAMPLED_IMAGE(2),
    STORAGE_IMAGE(3),
    UNIFORM_TEXEL_BUFFER(4),
    STORAGE_TEXEL_BUFFER(5),
    UNIFORM_BUFFER(6),
    STORAGE_BUFFER(7),
    UNIFORM_BUFFER_DYNAMIC(8),
    STORAGE_BUFFER_DYNAMIC(9),
    INPUT_ATTACHMENT(10);

    companion object {
        infix fun of(i: Int) = values().first { it.i == i }
    }
}

enum class VkAttachmentLoadOp(val i: Int) {
    LOAD(0),
    CLEAR(1),
    DONT_CARE(2);

    companion object {
        infix fun of(i: Int) = values().first { it.i == i }
    }
}


enum class VkAttachmentStoreOp(val i: Int) {
    STORE(0),
    DONT_CARE(1);

    companion object {
        infix fun of(i: Int) = values().first { it.i == i }
    }
}

enum class VkPipelineBindPoint(val i: Int) {
    GRAPHICS(0),
    COMPUTE(1);

    companion object {
        infix fun of(i: Int) = values().first { it.i == i }
    }
}


enum class VkCommandBufferLevel(val i: Int) {
    PRIMARY(0),
    SECONDARY(1);

    companion object {
        infix fun of(i: Int) = values().first { it.i == i }
    }
}

enum class VkIndexType(val i: Int) {
    UINT16(0),
    UINT32(1);

    companion object {
        infix fun of(i: Int) = values().first { it.i == i }
    }
}

enum class VkSubpassContents(val i: Int) {
    INLINE(0),
    SECONDARY_COMMAND_BUFFERS(1);

    companion object {
        infix fun of(i: Int) = values().first { it.i == i }
    }
}


enum class VkObjectType(val i: Int) {
    UNKNOWN(0),
    INSTANCE(1),
    PHYSICAL_DEVICE(2),
    DEVICE(3),
    QUEUE(4),
    SEMAPHORE(5),
    COMMAND_BUFFER(6),
    FENCE(7),
    DEVICE_MEMORY(8),
    BUFFER(9),
    IMAGE(10),
    EVENT(11),
    QUERY_POOL(12),
    BUFFER_VIEW(13),
    IMAGE_VIEW(14),
    SHADER_MODULE(15),
    PIPELINE_CACHE(16),
    PIPELINE_LAYOUT(17),
    RENDER_PASS(18),
    PIPELINE(19),
    DESCRIPTOR_SET_LAYOUT(20),
    SAMPLER(21),
    DESCRIPTOR_POOL(22),
    DESCRIPTOR_SET(23),
    FRAMEBUFFER(24),
    COMMAND_POOL(25),
    SAMPLER_YCBCR_CONVERSION(1000156000),
    DESCRIPTOR_UPDATE_TEMPLATE(1000085000),
    SURFACE_KHR(1000000000),
    SWAPCHAIN_KHR(1000001000),
    DISPLAY_KHR(1000002000),
    DISPLAY_MODE_KHR(1000002001),
    DEBUG_REPORT_CALLBACK_EXT(1000011000),
    OBJECT_TABLE_NVX(1000086000),
    INDIRECT_COMMANDS_LAYOUT_NVX(1000086001),
    DEBUG_UTILS_MESSENGER_EXT(1000128000),
    VALIDATION_CACHE_EXT(1000160000);

    companion object {
        infix fun of(i: Int) = values().first { it.i == i }
    }
}

typealias VkInstanceCreateFlags = VkFlags

enum class VkFormatFeature(val i: Int) {
    SAMPLED_IMAGE_BIT(0x00000001),
    STORAGE_IMAGE_BIT(0x00000002),
    STORAGE_IMAGE_ATOMIC_BIT(0x00000004),
    UNIFORM_TEXEL_BUFFER_BIT(0x00000008),
    STORAGE_TEXEL_BUFFER_BIT(0x00000010),
    STORAGE_TEXEL_BUFFER_ATOMIC_BIT(0x00000020),
    VERTEX_BUFFER_BIT(0x00000040),
    COLOR_ATTACHMENT_BIT(0x00000080),
    COLOR_ATTACHMENT_BLEND_BIT(0x00000100),
    DEPTH_STENCIL_ATTACHMENT_BIT(0x00000200),
    BLIT_SRC_BIT(0x00000400),
    BLIT_DST_BIT(0x00000800),
    SAMPLED_IMAGE_FILTER_LINEAR_BIT(0x00001000),
    TRANSFER_SRC_BIT(0x00004000),
    TRANSFER_DST_BIT(0x00008000),
    MIDPOINT_CHROMA_SAMPLES_BIT(0x00020000),
    SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT(0x00040000),
    SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT(0x00080000),
    SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT(0x00100000),
    SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT(0x00200000),
    DISJOINT_BIT(0x00400000),
    COSITED_CHROMA_SAMPLES_BIT(0x00800000),
    SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG(0x00002000),
    SAMPLED_IMAGE_FILTER_MINMAX_BIT_EXT(0x00010000);
}

inline infix fun Int.has(f: VkFormatFeature) = and(f.i) != 0
inline infix fun Int.hasnt(f: VkFormatFeature) = and(f.i) == 0

typealias VkFormatFeatureFlags = VkFlags

enum class VkImageUsage(val i: Int) {
    TRANSFER_SRC_BIT(0x00000001),
    TRANSFER_DST_BIT(0x00000002),
    SAMPLED_BIT(0x00000004),
    STORAGE_BIT(0x00000008),
    COLOR_ATTACHMENT_BIT(0x00000010),
    DEPTH_STENCIL_ATTACHMENT_BIT(0x00000020),
    TRANSIENT_ATTACHMENT_BIT(0x00000040),
    INPUT_ATTACHMENT_BIT(0x00000080);

    inline infix fun or(b: VkImageUsage): VkImageUsageFlags = i or b.i

    companion object {
        inline infix fun of(i: Int) = values().first { it.i == i }
    }
}

inline infix fun Int.or(b: VkImageUsage): VkImageUsageFlags = or(b.i)
inline infix fun Int.hasnt(b: VkImageUsage): Boolean = and(b.i) == 0

typealias VkImageUsageFlags = VkFlags

enum class VkImageCreate(val i: Int) {
    SPARSE_BINDING_BIT(0x00000001),
    SPARSE_RESIDENCY_BIT(0x00000002),
    SPARSE_ALIASED_BIT(0x00000004),
    MUTABLE_FORMAT_BIT(0x00000008),
    CUBE_COMPATIBLE_BIT(0x00000010),
    ALIAS_BIT(0x00000400),
    SPLIT_INSTANCE_BIND_REGIONS_BIT(0x00000040),
    `2D_ARRAY_COMPATIBLE_BIT`(0x00000020),
    BLOCK_TEXEL_VIEW_COMPATIBLE_BIT(0x00000080),
    EXTENDED_USAGE_BIT(0x00000100),
    PROTECTED_BIT(0x00000800),
    DISJOINT_BIT(0x00000200),
    SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT(0x00001000);

    companion object {
        inline infix fun of(i: Int) = values().first { it.i == i }
    }
}


typealias VkImageCreateFlags = VkFlags

enum class VkSampleCount(val i: Int) {
    `1_BIT`(0x00000001),
    `2_BIT`(0x00000002),
    `4_BIT`(0x00000004),
    `8_BIT`(0x00000008),
    `16_BIT`(0x00000010),
    `32_BIT`(0x00000020),
    `64_BIT`(0x00000040);

    companion object {
        inline infix fun of(i: Int) = values().first { it.i == i }
    }
}

typealias VkSampleCountFlags = VkFlags

enum class VkQueueFlag(val i: Int) {
    GRAPHICS_BIT(0x00000001),
    COMPUTE_BIT(0x00000002),
    TRANSFER_BIT(0x00000004),
    SPARSE_BINDING_BIT(0x00000008),
    PROTECTED_BIT(0x00000010);

    inline infix fun or(b: VkQueueFlag): VkQueueFlags = i or b.i
}

inline infix fun Int.has(b: VkQueueFlag) = and(b.i) != 0
inline infix fun Int.hasnt(b: VkQueueFlag) = and(b.i) == 0

typealias VkQueueFlags = VkFlags

enum class VkMemoryProperty(val i: Int) {
    DEVICE_LOCAL_BIT(0x00000001),
    HOST_VISIBLE_BIT(0x00000002),
    HOST_COHERENT_BIT(0x00000004),
    HOST_CACHED_BIT(0x00000008),
    LAZILY_ALLOCATED_BIT(0x00000010),
    PROTECTED_BIT(0x00000020);

    inline infix fun or(b: VkMemoryProperty): VkMemoryPropertyFlags = i or b.i
}

inline infix fun Int.has(b: VkMemoryProperty) = and(b.i) != 0
inline infix fun Int.hasnt(b: VkMemoryProperty) = and(b.i) == 0

typealias VkMemoryPropertyFlags = VkFlags

enum class VkMemoryHeapFlag(val i: Int) {
    DEVICE_LOCAL_BIT(0x00000001),
    MULTI_INSTANCE_BIT(0x00000002);

    companion object {
        inline infix fun of(i: Int) = values().first { it.i == i }
    }
}
typealias VkMemoryHeapFlags = VkFlags
typealias VkDeviceCreateFlags = VkFlags

enum class VkDeviceQueueCreate(val i: Int) {
    CREATE_PROTECTED_BIT(0x00000001)
}

typealias VkDeviceQueueCreateFlags = VkFlags

enum class VkPipelineStage(val i: Int) {
    TOP_OF_PIPE_BIT(0x00000001),
    DRAW_INDIRECT_BIT(0x00000002),
    VERTEX_INPUT_BIT(0x00000004),
    VERTEX_SHADER_BIT(0x00000008),
    TESSELLATION_CONTROL_SHADER_BIT(0x00000010),
    TESSELLATION_EVALUATION_SHADER_BIT(0x00000020),
    GEOMETRY_SHADER_BIT(0x00000040),
    FRAGMENT_SHADER_BIT(0x00000080),
    EARLY_FRAGMENT_TESTS_BIT(0x00000100),
    LATE_FRAGMENT_TESTS_BIT(0x00000200),
    COLOR_ATTACHMENT_OUTPUT_BIT(0x00000400),
    COMPUTE_SHADER_BIT(0x00000800),
    TRANSFER_BIT(0x00001000),
    BOTTOM_OF_PIPE_BIT(0x00002000),
    HOST_BIT(0x00004000),
    ALL_GRAPHICS_BIT(0x00008000),
    ALL_COMMANDS_BIT(0x00010000),
    COMMAND_PROCESS_BIT_NVX(0x00020000);

    companion object {
        inline infix fun of(i: Int) = values().first { it.i == i }
    }
}


typealias VkPipelineStageFlags = VkFlags

typealias VkMemoryMapFlags = VkFlags

enum class VkImageAspect(val i: Int) {
    COLOR_BIT(0x00000001),
    DEPTH_BIT(0x00000002),
    STENCIL_BIT(0x00000004),
    METADATA_BIT(0x00000008),
    PLANE_0_BIT(0x00000010),
    PLANE_1_BIT(0x00000020),
    PLANE_2_BIT(0x00000040);

    infix fun or(f: VkImageAspect) = i or f.i

    companion object {
        inline infix fun of(i: Int) = values().first { it.i == i }
    }
}

typealias VkImageAspectFlags = VkFlags

enum class VkSparseImageFormat(val i: Int) {
    SINGLE_MIPTAIL_BIT(0x00000001),
    ALIGNED_MIP_SIZE_BIT(0x00000002),
    NONSTANDARD_BLOCK_SIZE_BIT(0x00000004);

    companion object {
        inline infix fun of(i: Int) = values().first { it.i == i }
    }
}
typealias VkSparseImageFormatFlags = VkFlags

enum class VkSparseMemoryBind(val i: Int) {
    METADATA_BIT(0x00000001);

    companion object {
        inline infix fun of(i: Int) = values().first { it.i == i }
    }
}
typealias VkSparseMemoryBindFlags = VkFlags

enum class VkFenceCreate(val i: Int) {
    SIGNALED_BIT(0x00000001);

    companion object {
        inline infix fun of(i: Int) = values().first { it.i == i }
    }
}

typealias VkFenceCreateFlags = VkFlags
typealias VkSemaphoreCreateFlags = VkFlags
typealias VkEventCreateFlags = VkFlags
typealias VkQueryPoolCreateFlags = VkFlags

enum class VkQueryPipelineStatistic(val i: Int) {
    INPUT_ASSEMBLY_VERTICES_BIT(0x00000001),
    INPUT_ASSEMBLY_PRIMITIVES_BIT(0x00000002),
    VERTEX_SHADER_INVOCATIONS_BIT(0x00000004),
    GEOMETRY_SHADER_INVOCATIONS_BIT(0x00000008),
    GEOMETRY_SHADER_PRIMITIVES_BIT(0x00000010),
    CLIPPING_INVOCATIONS_BIT(0x00000020),
    CLIPPING_PRIMITIVES_BIT(0x00000040),
    FRAGMENT_SHADER_INVOCATIONS_BIT(0x00000080),
    TESSELLATION_CONTROL_SHADER_PATCHES_BIT(0x00000100),
    TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT(0x00000200),
    COMPUTE_SHADER_INVOCATIONS_BIT(0x00000400);

    companion object {
        inline infix fun of(i: Int) = values().first { it.i == i }
    }
}
typealias VkQueryPipelineStatisticFlags = VkFlags

enum class VkQueryResult(val i: Int) {
    `64_BIT`(0x00000001),
    WAIT_BIT(0x00000002),
    WITH_AVAILABILITY_BIT(0x00000004),
    PARTIAL_BIT(0x00000008);

    companion object {
        inline infix fun of(i: Int) = values().first { it.i == i }
    }
}
typealias VkQueryResultFlags = VkFlags

enum class VkBufferCreate(val i: Int) {
    SPARSE_BINDING_BIT(0x00000001),
    SPARSE_RESIDENCY_BIT(0x00000002),
    SPARSE_ALIASED_BIT(0x00000004),
    PROTECTED_BIT(0x00000008);

    companion object {
        inline infix fun of(i: Int) = values().first { it.i == i }
    }
}

typealias VkBufferCreateFlags = VkFlags

enum class VkBufferUsage(val i: Int) {
    TRANSFER_SRC_BIT(0x00000001),
    TRANSFER_DST_BIT(0x00000002),
    UNIFORM_TEXEL_BUFFER_BIT(0x00000004),
    STORAGE_TEXEL_BUFFER_BIT(0x00000008),
    UNIFORM_BUFFER_BIT(0x00000010),
    STORAGE_BUFFER_BIT(0x00000020),
    INDEX_BUFFER_BIT(0x00000040),
    VERTEX_BUFFER_BIT(0x00000080),
    INDIRECT_BUFFER_BIT(0x00000100);

    infix fun or(f: VkBufferUsage): VkBufferCreateFlags = i or f.i

    companion object {
        inline infix fun of(i: Int) = values().first { it.i == i }
    }
}

infix fun Int.or(f: VkBufferUsage): VkBufferCreateFlags = or(f.i)

typealias VkBufferUsageFlags = VkFlags
typealias VkBufferViewCreateFlags = VkFlags
typealias VkImageViewCreateFlags = VkFlags

typealias VkShaderModuleCreateFlags = VkFlags
typealias VkPipelineCacheCreateFlags = VkFlags


enum class VkPipelineCreate(val i: Int) {
    DISABLE_OPTIMIZATION_BIT(0x00000001),
    ALLOW_DERIVATIVES_BIT(0x00000002),
    DERIVATIVE_BIT(0x00000004),
    VIEW_INDEX_FROM_DEVICE_INDEX_BIT(0x00000008),
    DISPATCH_BASE(0x00000010);

    companion object {
        inline infix fun of(i: Int) = values().first { it.i == i }
    }
}
typealias VkPipelineCreateFlags = VkFlags

typealias VkPipelineShaderStageCreateFlags = VkFlags

enum class VkShaderStage(val i: Int) {
    VERTEX_BIT(0x00000001),
    TESSELLATION_CONTROL_BIT(0x00000002),
    TESSELLATION_EVALUATION_BIT(0x00000004),
    GEOMETRY_BIT(0x00000008),
    FRAGMENT_BIT(0x00000010),
    COMPUTE_BIT(0x00000020),
    ALL_GRAPHICS(0x0000001F),
    ALL(0x7FFFFFFF);

    companion object {
        inline infix fun of(i: Int) = values().first { it.i == i }
    }
}


typealias VkPipelineVertexInputStateCreateFlags = VkFlags
typealias VkPipelineInputAssemblyStateCreateFlags = VkFlags

typealias VkPipelineTessellationStateCreateFlags = VkFlags
typealias VkPipelineViewportStateCreateFlags = VkFlags

typealias VkPipelineRasterizationStateCreateFlags = VkFlags


enum class VkCullMode(val i: Int) {
    NONE(0),
    FRONT_BIT(0x00000001),
    BACK_BIT(0x00000002),
    FRONT_AND_BACK(0x00000003);

    companion object {
        inline infix fun of(i: Int) = values().first { it.i == i }
    }
}

typealias VkCullModeFlags = VkFlags
typealias VkPipelineMultisampleStateCreateFlags = VkFlags
typealias VkPipelineDepthStencilStateCreateFlags = VkFlags

typealias VkPipelineColorBlendStateCreateFlags = VkFlags

enum class VkColorComponent(val i: Int) {
    R_BIT(0x00000001),
    G_BIT(0x00000002),
    B_BIT(0x00000004),
    A_BIT(0x00000008);

    companion object {
        inline infix fun of(i: Int) = values().first { it.i == i }
    }
}

infix fun VkColorComponent.or(f: VkColorComponent): VkColorComponentFlags = i or f.i
infix fun Int.or(f: VkColorComponent): VkColorComponentFlags = or(f.i)

typealias VkColorComponentFlags = VkFlags
typealias VkPipelineDynamicStateCreateFlags = VkFlags
typealias VkPipelineLayoutCreateFlags = VkFlags

typealias VkShaderStageFlags = VkFlags

typealias VkSamplerCreateFlags = VkFlags

enum class VkDescriptorSetLayoutCreate(val i: Int) {
    PUSH_DESCRIPTOR_BIT_KHR(0x00000001),
    UPDATE_AFTER_BIND_POOL_BIT_EXT(0x00000002);

    companion object {
        inline infix fun of(i: Int) = values().first { it.i == i }
    }
}

typealias VkDescriptorSetLayoutCreateFlags = VkFlags

enum class VkDescriptorPoolCreate(val i: Int) {
    FREE_DESCRIPTOR_SET_BIT(0x00000001),
    UPDATE_AFTER_BIND_BIT_EXT(0x00000002);

    companion object {
        inline infix fun of(i: Int) = values().first { it.i == i }
    }
}

typealias VkDescriptorPoolCreateFlags = VkFlags
typealias VkDescriptorPoolResetFlags = VkFlags
typealias VkFramebufferCreateFlags = VkFlags

typealias VkRenderPassCreateFlags = VkFlags

enum class VkAttachmentDescriptionFlag(val i: Int) {
    MAY_ALIAS_BIT(0x00000001);

    companion object {
        inline infix fun of(i: Int) = values().first { it.i == i }
    }
}

typealias VkAttachmentDescriptionFlags = VkFlags


enum class VkSubpassDescriptionFlag(val i: Int) {
    PER_VIEW_ATTRIBUTES_BIT_NVX(0x00000001),
    PER_VIEW_POSITION_X_ONLY_BIT_NVX(0x00000002);

    companion object {
        inline infix fun of(i: Int) = values().first { it.i == i }
    }
}

typealias VkSubpassDescriptionFlags = VkFlags

enum class VkAccess(val i: Int) {
    INDIRECT_COMMAND_READ_BIT(0x00000001),
    INDEX_READ_BIT(0x00000002),
    VERTEX_ATTRIBUTE_READ_BIT(0x00000004),
    UNIFORM_READ_BIT(0x00000008),
    INPUT_ATTACHMENT_READ_BIT(0x00000010),
    SHADER_READ_BIT(0x00000020),
    SHADER_WRITE_BIT(0x00000040),
    COLOR_ATTACHMENT_READ_BIT(0x00000080),
    COLOR_ATTACHMENT_WRITE_BIT(0x00000100),
    DEPTH_STENCIL_ATTACHMENT_READ_BIT(0x00000200),
    DEPTH_STENCIL_ATTACHMENT_WRITE_BIT(0x00000400),
    TRANSFER_READ_BIT(0x00000800),
    TRANSFER_WRITE_BIT(0x00001000),
    HOST_READ_BIT(0x00002000),
    HOST_WRITE_BIT(0x00004000),
    MEMORY_READ_BIT(0x00008000),
    MEMORY_WRITE_BIT(0x00010000),
    COMMAND_PROCESS_READ_BIT_NVX(0x00020000),
    COMMAND_PROCESS_WRITE_BIT_NVX(0x00040000),
    COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT(0x00080000);

    infix fun or(f: VkAccess) = i or f.i

    companion object {
        infix fun of(i: Int) = values().first { it.i == i }
    }
}

inline infix fun Int.or(f: VkAccess) = or(f.i)

typealias VkAccessFlags = VkFlags

enum class VkDependency(val i: Int) {
    BY_REGION_BIT(0x00000001),
    VIEW_LOCAL_BIT(0x00000002),
    DEVICE_GROUP_BIT(0x00000004);

    companion object {
        infix fun of(i: Int) = values().first { it.i == i }
    }
}

typealias VkDependencyFlags = VkFlags

enum class VkCommandPoolCreate(val i: Int) {
    TRANSIENT_BIT(0x00000001),
    RESET_COMMAND_BUFFER_BIT(0x00000002),
    PROTECTED_BIT(0x00000004);

    companion object {
        infix fun of(i: Int) = values().first { it.i == i }
    }
}

typealias VkCommandPoolCreateFlags = VkFlags

enum class VkCommandPoolReset(val i: Int) {
    RELEASE_RESOURCES_BIT(0x00000001);

    companion object {
        inline infix fun of(i: Int) = values().first { it.i == i }
    }
}
typealias VkCommandPoolResetFlags = VkFlags

enum class VkCommandBufferUsage(val i: Int) {
    ONE_TIME_SUBMIT_BIT(0x00000001),
    RENDER_PASS_CONTINUE_BIT(0x00000002),
    SIMULTANEOUS_USE_BIT(0x00000004);

    companion object {
        inline infix fun of(i: Int) = values().first { it.i == i }
    }
}

infix fun Int.or(f: VkCommandBufferUsage) = or(f.i)

typealias VkCommandBufferUsageFlags = VkFlags


enum class VkQueryControl(val i: Int) {
    PRECISE_BIT(0x00000001);

    companion object {
        inline infix fun of(i: Int) = values().first { it.i == i }
    }
}
typealias VkQueryControlFlags = VkFlags

enum class VkCommandBufferReset(val i: Int) {
    RELEASE_RESOURCES_BIT(0x00000001);

    companion object {
        infix fun of(i: Int) = values().first { it.i == i }
    }
}
typealias VkCommandBufferResetFlags = VkFlags

enum class VkStencilFace(val i: Int) {
    FRONT_BIT(0x00000001),
    BACK_BIT(0x00000002),
    FRONT_AND_BACK(0x00000003);

    companion object {
        inline infix fun of(i: Int) = values().first { it.i == i }
    }
}
typealias VkStencilFaceFlags = VkFlags

// ---------------------------------------------------------------------------------------------------------------------
// line 3669


enum class VkPointClippingBehavior(val i: Int) {
    ALL_CLIP_PLANES(0),
    USER_CLIP_PLANES_ONLY(1);

    companion object {
        inline infix fun of(i: Int) = values().first { it.i == i }
    }
}

enum class VkTessellationDomainOrigin(val i: Int) {
    UPPER_LEFT(0),
    LOWER_LEFT(1);

    companion object {
        inline infix fun of(i: Int) = values().first { it.i == i }
    }
}

enum class VkSamplerYcbcrModelConversion(val i: Int) {
    RGB_IDENTITY(0),
    YCBCR_IDENTITY(1),
    YCBCR_709(2),
    YCBCR_601(3),
    YCBCR_2020(4);

    companion object {
        inline infix fun of(i: Int) = values().first { it.i == i }
    }
}

enum class VkSamplerYcbcrRange(val i: Int) {
    ITU_FULL(0),
    ITU_NARROW(1);
}

enum class VkChromaLocation(val i: Int) {
    COSITED_EVEN(0),
    MIDPOINT(1);

    companion object {
        inline infix fun of(i: Int) = values().first { it.i == i }
    }
}

enum class VkDescriptorUpdateTemplateType(val i: Int) {
    DESCRIPTOR_SET(0),
    PUSH_DESCRIPTORS_KHR(1);

    companion object {
        inline infix fun of(i: Int) = values().first { it.i == i }
    }
}


enum class VkSubgroupFeature(val i: Int) {
    BASIC_BIT(0x00000001),
    VOTE_BIT(0x00000002),
    ARITHMETIC_BIT(0x00000004),
    BALLOT_BIT(0x00000008),
    SHUFFLE_BIT(0x00000010),
    SHUFFLE_RELATIVE_BIT(0x00000020),
    CLUSTERED_BIT(0x00000040),
    QUAD_BIT(0x00000080),
    PARTITIONED_BIT_NV(0x00000100);

    companion object {
        inline infix fun of(i: Int) = values().first { it.i == i }
    }
}

typealias VkSubgroupFeatureFlags = VkFlags

enum class VkPeerMemoryFeature(val i: Int) {
    COPY_SRC_BIT(0x00000001),
    COPY_DST_BIT(0x00000002),
    GENERIC_SRC_BIT(0x00000004),
    GENERIC_DST_BIT(0x00000008);

    companion object {
        inline infix fun of(i: Int) = values().first { it.i == i }
    }
}

typealias VkPeerMemoryFeatureFlags = VkFlags

enum class VkMemoryAllocateFlagBits(val i: Int) {
    DEVICE_MASK_BIT(0x00000001);

    companion object {
        inline infix fun of(i: Int) = values().first { it.i == i }
    }
}

typealias VkMemoryAllocateFlags = VkFlags
typealias VkCommandPoolTrimFlags = VkFlags
typealias VkDescriptorUpdateTemplateCreateFlags = VkFlags

//enum class VkExternalMemoryHandleTypeFlagBits {
//    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT = 0x00000001,
//    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT = 0x00000002,
//    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 0x00000004,
//    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT = 0x00000008,
//    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT = 0x00000010,
//    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT = 0x00000020,
//    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT = 0x00000040,
//    VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT = 0x00000200,
//    VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID = 0x00000400,
//    VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT = 0x00000080,
//    VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT = 0x00000100,
//    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT_KHR = VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT,
//    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR = VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT,
//    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR = VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT,
//    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT_KHR = VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT,
//    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT_KHR = VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT,
//    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT_KHR = VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT,
//    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT_KHR = VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT,
//    VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
//} VkExternalMemoryHandleTypeFlagBits;
//typedef VkFlags VkExternalMemoryHandleTypeFlags;
//
//typedef enum VkExternalMemoryFeatureFlagBits {
//    VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT = 0x00000001,
//    VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT = 0x00000002,
//    VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT = 0x00000004,
//    VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_KHR = VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT,
//    VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_KHR = VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT,
//    VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_KHR = VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT,
//    VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
//} VkExternalMemoryFeatureFlagBits;
//typedef VkFlags VkExternalMemoryFeatureFlags;
//
//typedef enum VkExternalFenceHandleTypeFlagBits {
//    VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT = 0x00000001,
//    VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT = 0x00000002,
//    VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 0x00000004,
//    VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT = 0x00000008,
//    VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR = VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT,
//    VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR = VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT,
//    VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR = VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT,
//    VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT_KHR = VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT,
//    VK_EXTERNAL_FENCE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
//} VkExternalFenceHandleTypeFlagBits;
//typedef VkFlags VkExternalFenceHandleTypeFlags;
//
//typedef enum VkExternalFenceFeatureFlagBits {
//    VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT = 0x00000001,
//    VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT = 0x00000002,
//    VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT_KHR = VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT,
//    VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT_KHR = VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT,
//    VK_EXTERNAL_FENCE_FEATURE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
//} VkExternalFenceFeatureFlagBits;
//typedef VkFlags VkExternalFenceFeatureFlags;
//
//typedef enum VkFenceImportFlagBits {
//    VK_FENCE_IMPORT_TEMPORARY_BIT = 0x00000001,
//    VK_FENCE_IMPORT_TEMPORARY_BIT_KHR = VK_FENCE_IMPORT_TEMPORARY_BIT,
//    VK_FENCE_IMPORT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
//} VkFenceImportFlagBits;
//typedef VkFlags VkFenceImportFlags;
//
//typedef enum VkSemaphoreImportFlagBits {
//    VK_SEMAPHORE_IMPORT_TEMPORARY_BIT = 0x00000001,
//    VK_SEMAPHORE_IMPORT_TEMPORARY_BIT_KHR = VK_SEMAPHORE_IMPORT_TEMPORARY_BIT,
//    VK_SEMAPHORE_IMPORT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
//} VkSemaphoreImportFlagBits;
//typedef VkFlags VkSemaphoreImportFlags;
//
//typedef enum VkExternalSemaphoreHandleTypeFlagBits {
//    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT = 0x00000001,
//    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT = 0x00000002,
//    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 0x00000004,
//    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT = 0x00000008,
//    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT = 0x00000010,
//    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR = VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT,
//    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR = VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT,
//    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR = VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT,
//    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT_KHR = VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT,
//    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT_KHR = VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT,
//    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
//} VkExternalSemaphoreHandleTypeFlagBits;
//typedef VkFlags VkExternalSemaphoreHandleTypeFlags;
//
//typedef enum VkExternalSemaphoreFeatureFlagBits {
//    VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT = 0x00000001,
//    VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT = 0x00000002,
//    VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT_KHR = VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT,
//    VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT_KHR = VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT,
//    VK_EXTERNAL_SEMAPHORE_FEATURE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
//} VkExternalSemaphoreFeatureFlagBits;
//typedef VkFlags VkExternalSemaphoreFeatureFlags;

enum class VkColorSpace(val i: Int) {
    SRGB_NONLINEAR_KHR(0),
    DISPLAY_P3_NONLINEAR_EXT(1000104001),
    EXTENDED_SRGB_LINEAR_EXT(1000104002),
    DCI_P3_LINEAR_EXT(1000104003),
    DCI_P3_NONLINEAR_EXT(1000104004),
    BT709_LINEAR_EXT(1000104005),
    BT709_NONLINEAR_EXT(1000104006),
    BT2020_LINEAR_EXT(1000104007),
    HDR10_ST2084_EXT(1000104008),
    DOLBYVISION_EXT(1000104009),
    HDR10_HLG_EXT(1000104010),
    ADOBERGB_LINEAR_EXT(1000104011),
    ADOBERGB_NONLINEAR_EXT(1000104012),
    PASS_THROUGH_EXT(1000104013),
    EXTENDED_SRGB_NONLINEAR_EXT(1000104014);

    companion object {
        inline infix fun of(i: Int) = values().first { it.i == i }
    }
}


enum class VkPresentMode(val i: Int) {
    IMMEDIATE_KHR(0),
    MAILBOX_KHR(1),
    FIFO_KHR(2),
    FIFO_RELAXED_KHR(3),
    SHARED_DEMAND_REFRESH_KHR(1000111000),
    SHARED_CONTINUOUS_REFRESH_KHR(1000111001);

    companion object {
        inline infix fun of(i: Int) = values().first { it.i == i }
    }
}


enum class VkSurfaceTransform(val i: Int) {
    IDENTITY_BIT_KHR(0x00000001),
    ROTATE_90_BIT_KHR(0x00000002),
    ROTATE_180_BIT_KHR(0x00000004),
    ROTATE_270_BIT_KHR(0x00000008),
    HORIZONTAL_MIRROR_BIT_KHR(0x00000010),
    HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR(0x00000020),
    HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR(0x00000040),
    HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR(0x00000080),
    INHERIT_BIT_KHR(0x00000100);

    companion object {
        inline infix fun of(i: Int) = values().first { it.i == i }
    }
}

typealias VkSurfaceTransformFlagsKHR = VkFlags

enum class VkCompositeAlpha(val i: Int) {
    OPAQUE_BIT_KHR(0x00000001),
    PRE_MULTIPLIED_BIT_KHR(0x00000002),
    POST_MULTIPLIED_BIT_KHR(0x00000004),
    INHERIT_BIT_KHR(0x00000008);

    companion object {
        inline infix fun of(i: Int) = values().first { it.i == i }
    }
}

inline infix fun Int.has(f: VkCompositeAlpha) = and(f.i) != 0

typealias VkCompositeAlphaFlagsKHR = VkFlags


enum class VkSwapchainCreateKHR(val i: Int) {
    BIND_SFR_BIT_KHX(0x00000001);

    companion object {
        inline infix fun of(i: Int) = values().first { it.i == i }
    }
}


enum class VkDebugReportObjectType(val i: Int) {
    UNKNOWN_EXT(0),
    INSTANCE_EXT(1),
    PHYSICAL_DEVICE_EXT(2),
    DEVICE_EXT(3),
    QUEUE_EXT(4),
    SEMAPHORE_EXT(5),
    COMMAND_BUFFER_EXT(6),
    FENCE_EXT(7),
    DEVICE_MEMORY_EXT(8),
    BUFFER_EXT(9),
    IMAGE_EXT(10),
    EVENT_EXT(11),
    QUERY_POOL_EXT(12),
    BUFFER_VIEW_EXT(13),
    IMAGE_VIEW_EXT(14),
    SHADER_MODULE_EXT(15),
    PIPELINE_CACHE_EXT(16),
    PIPELINE_LAYOUT_EXT(17),
    RENDER_PASS_EXT(18),
    PIPELINE_EXT(19),
    DESCRIPTOR_SET_LAYOUT_EXT(20),
    SAMPLER_EXT(21),
    DESCRIPTOR_POOL_EXT(22),
    DESCRIPTOR_SET_EXT(23),
    FRAMEBUFFER_EXT(24),
    COMMAND_POOL_EXT(25),
    SURFACE_KHR_EXT(26),
    SWAPCHAIN_KHR_EXT(27),
    DEBUG_REPORT_CALLBACK_EXT_EXT(28),
    DISPLAY_KHR_EXT(29),
    DISPLAY_MODE_KHR_EXT(30),
    OBJECT_TABLE_NVX_EXT(31),
    INDIRECT_COMMANDS_LAYOUT_NVX_EXT(32),
    VALIDATION_CACHE_EXT(33),
    DESCRIPTOR_UPDATE_TEMPLATE_KHR_EXT(1000085000),
    SAMPLER_YCBCR_CONVERSION_KHR_EXT(1000156000);

    companion object {
        inline infix fun of(i: Int) = values().first { it.i == i }
    }
}


//typealias VkDebugReportFlagBitsEXT = Int

enum class VkDebugReport(val i: Int) {
    INFORMATION_BIT_EXT(0x00000001),
    WARNING_BIT_EXT(0x00000002),
    PERFORMANCE_WARNING_BIT_EXT(0x00000004),
    ERROR_BIT_EXT(0x00000008),
    DEBUG_BIT_EXT(0x00000010);

    inline infix fun or(b: VkDebugReport): VkDebugReportFlagsEXT = i or b.i
}

inline infix fun Int.has(f: VkDebugReport) = and(f.i) != 0
inline infix fun Int.or(f: VkDebugReport): VkDebugReportFlagsEXT = or(f.i)

typealias VkDebugReportFlagsEXT = VkFlags

